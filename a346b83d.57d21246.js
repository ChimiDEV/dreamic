(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{72:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return c})),a.d(t,"metadata",(function(){return s})),a.d(t,"rightToc",(function(){return d})),a.d(t,"default",(function(){return b}));var n=a(2),o=a(6),i=(a(0),a(86)),r=a(84),c={id:"design",title:"Design and Usage",sidebar_label:"Design and Usage"},s={unversionedId:"core/design",id:"core/design",isDocsHomePage:!1,title:"Design and Usage",description:"What even is Dreamic?",source:"@site/docs/core/design.mdx",slug:"/core/design",permalink:"/dreamic/docs/core/design",version:"current",sidebar_label:"Design and Usage",sidebar:"sidebar",next:{title:"Dreamic Types",permalink:"/dreamic/docs/core/monads"}},d=[{value:"What even is Dreamic?",id:"what-even-is-dreamic",children:[]},{value:"Usage",id:"usage",children:[{value:"Factory Functions",id:"factory-functions",children:[]},{value:"Static Methods",id:"static-methods",children:[]},{value:"Customized Creation of Monads",id:"customized-creation-of-monads",children:[]}]},{value:"Point-free notation",id:"point-free-notation",children:[]}],l={rightToc:d};function b(e){var t=e.components,a=Object(o.a)(e,["components"]);return Object(i.b)("wrapper",Object(n.a)({},l,a,{components:t,mdxType:"MDXLayout"}),Object(i.b)("h2",{id:"what-even-is-dreamic"},"What even is Dreamic?"),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Dreamic")," (Dream + Atomic) is a utility library designed for functional programming in JavaScript.\nThe goal is a easy to use api for working with so called ",Object(i.b)("inlineCode",{parentName:"p"},"Monads"),".\nWorry not, if you've never heard of them before.\nThis documentation includes a ",Object(i.b)(r.a,{to:"/blog/2020/09/05",mdxType:"Link"},"quick practical introduction")," as well as some references to other learning sources.",Object(i.b)("br",{parentName:"p"}),"\n","For now: ",Object(i.b)("strong",{parentName:"p"},"Let's just say, they'll be the reason for a better sleep at night.")),Object(i.b)("p",null,"Base of Dreamic (hence the name) is an atomic approach in function design and ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"https://github.com/fantasyland/fantasy-land"}),"Fantasy-Land"),' aka. the "Algebraic JavaScript Specification".\nWhile reading the documentation, you\'ll see that the mantra is ',Object(i.b)("em",{parentName:"p"},"composition over all-in-one solutions"),".\nHeavily inspired by ",Object(i.b)("inlineCode",{parentName:"p"},"ramda"),", ",Object(i.b)("inlineCode",{parentName:"p"},"lodash/fp")," and other libraries, ",Object(i.b)("strong",{parentName:"p"},"Dreamic will help you keep your code simple, clean, expressive and pure.")),Object(i.b)("h2",{id:"usage"},"Usage"),Object(i.b)("p",null,"Every available monad by Dreamic comes with a specified way of creating and interacting with each.\nFor easier usage all of them will ",Object(i.b)("strong",{parentName:"p"},"share")," common functionalities, which will be described below.\nOtherwise there may exist some additionally functions specific to a monad. But don't worry, that will be documented."),Object(i.b)("p",null,"However since you may wonder how this ",Object(i.b)("em",{parentName:"p"},"common functionality")," might look like, here is little introduction:"),Object(i.b)("h3",{id:"factory-functions"},"Factory Functions"),Object(i.b)("p",null,"A monad comes with a set of factory functions.\nThis will usually be just the name prefixed with ",Object(i.b)("strong",{parentName:"p"},"f"),", i.e. ",Object(i.b)("inlineCode",{parentName:"p"},"f[MonadName]")," (obviously you can rename the import the way you want).\nIf for any reason a monad combines different characteristics (e.g. a ",Object(i.b)("strong",{parentName:"p"},"Maybe")," being ",Object(i.b)("strong",{parentName:"p"},"'Just'")," or ",Object(i.b)("strong",{parentName:"p"},"'Nothing'"),"), each of them will be offering their own factory function."),Object(i.b)("p",null,"Since monads come with different features and use cases, the factory function footprint and outcome might differ from monad to monad.\nFor example while a ",Object(i.b)("strong",{parentName:"p"},"Maybe")," factory has following signature:",Object(i.b)("br",{parentName:"p"}),"\n",Object(i.b)("inlineCode",{parentName:"p"},"fMaybe:: a -> a -> Maybe a | maybe(defaultValue, optionalValue)"),Object(i.b)("br",{parentName:"p"}),"\n","The factory function of ",Object(i.b)("strong",{parentName:"p"},"Either")," does look like:",Object(i.b)("br",{parentName:"p"}),"\n",Object(i.b)("inlineCode",{parentName:"p"},"fEither:: (() -> a) -> Either e a | either(throwingFunction)")),Object(i.b)("p",null,"So if you're using a factory function make sure to refer to the documentation of the respective monad."),Object(i.b)("h3",{id:"static-methods"},"Static Methods"),Object(i.b)("p",null,'Monads do expose a "static method"-like namespace, this will be export simply as the name of the monad all lowercase.\nThis instance is helpful for some point-free (see below) utility as well, hence the decision to take the name as exported keyword.\nObviously most static functions are specific to each monad himself, however some functions are available through ',Object(i.b)("strong",{parentName:"p"},"Fantasy-Land"),".\nFor example ",Object(i.b)("inlineCode",{parentName:"p"},"of")," (",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"https://github.com/fantasyland/fantasy-land#applicative"}),"Applicative"),") is another way to create a new monad from a value."),Object(i.b)("h3",{id:"customized-creation-of-monads"},"Customized Creation of Monads"),Object(i.b)("p",null,"The last alternative for creating a monad is not a shared feature over every monad.\nSome monads do come with specifically created functions to create a monad.\nSince this depends on the type of the monad you're working with, you'll have to look up the documentation."),Object(i.b)("h2",{id:"point-free-notation"},"Point-free notation"))}b.isMDXComponent=!0}}]);