(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{70:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return i})),a.d(t,"metadata",(function(){return s})),a.d(t,"rightToc",(function(){return l})),a.d(t,"default",(function(){return b}));var n=a(2),r=a(6),o=(a(0),a(86)),i={title:"Me, Myself and Monads",author:"Tim Walter <ChimiDEV>",author_title:"Maintainer",author_url:"https://github.com/ChimiDEV",author_image_url:"https://avatars1.githubusercontent.com/u/15871426",tags:["monads","functional programming","fantasy-land"]},s={permalink:"/dreamic/blog/2020/09/05/",source:"@site/blog/2020-09-05.mdx",description:"Motivation",date:"2020-09-05T00:00:00.000Z",tags:[{label:"monads",permalink:"/dreamic/blog/tags/monads"},{label:"functional programming",permalink:"/dreamic/blog/tags/functional-programming"},{label:"fantasy-land",permalink:"/dreamic/blog/tags/fantasy-land"}],title:"Me, Myself and Monads",readingTime:3.745,truncated:!1},l=[{value:"Motivation",id:"motivation",children:[]},{value:"Quick Introduction to Monads",id:"quick-introduction-to-monads",children:[{value:"References",id:"references",children:[]}]}],c={rightToc:l};function b(e){var t=e.components,a=Object(r.a)(e,["components"]);return Object(o.b)("wrapper",Object(n.a)({},c,a,{components:t,mdxType:"MDXLayout"}),Object(o.b)("h2",{id:"motivation"},"Motivation"),Object(o.b)("p",null,"Since this is the first blog entry, let me describe my motivation behind this project.",Object(o.b)("br",{parentName:"p"}),"\n","While getting more and more into functional programming, I stumbled across ",Object(o.b)("inlineCode",{parentName:"p"},"Fantasy-Land"),' aka. the "Algebraic JavaScript Specification".',Object(o.b)("br",{parentName:"p"}),"\n","At First I was pretty skeptical. Almost overwhelmed.\nAdditionally I didn't see the need at the time I've seen algebraic javascript types first.\nHence the reason I parked the idea in the depths of my brain and forgot about it."),Object(o.b)("p",null,"However, in the recent past I was more inclined by the idea of monads.\nFinally I decided to come to peace with the fantasy-land specification.\nIt did take some time to study the fundaments of it, but I started trying to use it in may daily life as software engineer.",Object(o.b)("br",{parentName:"p"}),"\n","The result: today I don't want to miss those types anymore."),Object(o.b)("h2",{id:"quick-introduction-to-monads"},"Quick Introduction to Monads"),Object(o.b)("p",null,"Instead of starting with lots of confusing and abstract definitions and reasons what a monad is and why one should use it,\nlet me introduce you to monads the practical way."),Object(o.b)("p",null,"Think about ",Object(o.b)("inlineCode",{parentName:"p"},"Monads")," like a ",Object(o.b)("inlineCode",{parentName:"p"},"Container")," that can carry a value.\nYou can transform, handle and change that value in this container, but you might need to inspect (called ",Object(o.b)("inlineCode",{parentName:"p"},"join")," or ",Object(o.b)("inlineCode",{parentName:"p"},"extract"),") it at the end.",Object(o.b)("br",{parentName:"p"}),"\n","You now will think ",Object(o.b)("em",{parentName:"p"},'"Why should I want to encapsulate any of my values in such a construct?"'),".",Object(o.b)("br",{parentName:"p"}),"\n",Object(o.b)("strong",{parentName:"p"},"Simply said: To keep it pure.")),Object(o.b)("p",null,'Imagine a function that does something "dangerous", e.g. retrieving a value from the user or parsing dynamic data.'),Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),'const parseSomething = x => {\n  const tmp = JSON.parse(x);\n  const expectedObj = dangerousParsing(tmp);\n  return expectedObj.thatArrayShouldExist;\n};\n\nconst data = parseSomething("{I\'m not valid}");\ndata.usefulData.map(/*...*/);\n// Process will crash.\n')),Object(o.b)("p",null,"Now one could start adding error handling inside the ",Object(o.b)("inlineCode",{parentName:"p"},"parseSomething"),".",Object(o.b)("br",{parentName:"p"}),"\n","Let's say we're smart and do not want to throw any errors, since this will crash the process.\nInstead we return ",Object(o.b)("inlineCode",{parentName:"p"},"null"),"."),Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),'parseSomething = x => {\n  let tmp;\n  try {\n    tmp = JSON.parse(x);\n  } catch (err) {\n    return null;\n  }\n\n  let expectedObj;\n  try {\n    expectedObj = dangerousParsing(tmp);\n  } catch (err) {\n    return null;\n  }\n\n  return (expectedObj || {}).thatArrayShouldExist || null;\n};\n\nconst data = parseSomething("{I\'m not valid}");\n// highlight-next-line\ndata.usefulData.map(/*...*/);\n// Process might still crash.\n')),Object(o.b)("p",null,"Quite cumbersome (obviously I made it even more extreme as needed, but you get the idea).\nHowever, we introduced even more problems.",Object(o.b)("br",{parentName:"p"}),"\n","First of all we do return different ",Object(o.b)("strong",{parentName:"p"},"Types"),": null or the successful parsed value.",Object(o.b)("br",{parentName:"p"}),"\n","This is quite a problem, when we look above (highlighted line), the process will still crash.\nAlso we lose a lot of readability."),Object(o.b)("p",null,"Let me introduce you ",Object(o.b)("inlineCode",{parentName:"p"},"Maybe"),".\nMaybe is a monad, that either contains a value (often referred as ",Object(o.b)("inlineCode",{parentName:"p"},"Just"),") or simply ",Object(o.b)("inlineCode",{parentName:"p"},"Nothing"),"."),Object(o.b)("p",null,"Before we refactor our code, let's explain some methods a monad does come with."),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("strong",{parentName:"li"},"map"),": You might know ",Object(o.b)("em",{parentName:"li"},"map")," from an array. This function accepts a function and will return the same monad with the transformed value using the supplied function."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("strong",{parentName:"li"},"ap"),": Use this to apply a monad to another monad. The given monad holds a function as value, which will be used on the applied monad's value."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("strong",{parentName:"li"},"chain"),": Chain is especially useful, when handling a function that again returns the same monad.\nWhy? Using a ",Object(o.b)("inlineCode",{parentName:"li"},".map")," in this case would result in a ",Object(o.b)("inlineCode",{parentName:"li"},"Maybe(Maybe(value))"),". Not very convenient."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("strong",{parentName:"li"},"join or extract"),": Use join to finally inspect the value of a monad.")),Object(o.b)("p",null,"Additional some hints, what a ",Object(o.b)("strong",{parentName:"p"},"Maybe")," monad makes it special: Using a ",Object(o.b)("strong",{parentName:"p"},"Maybe")," any operation will only be invoked, if the containing value ",Object(o.b)("strong",{parentName:"p"},"is not Nothing."),Object(o.b)("br",{parentName:"p"}),"\n","Now that you got some insights, what a monad comes with, see the refactored function from above:"),Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),"const parseSomething = x =>\n  Maybe.of(x)\n    .map(safeJsonParse)\n    .chain(dangerousParsing) // dangerousParsing now returns a Maybe as well\n    .map(safeGet('thatArrayShouldExist'));\n\n// getOrElse is a method, that either returns your Maybe's value or the given default value.\nparseSomething(\"{I'm not valid}\")\n  .getOrElse([])\n  .map(/*...*/);\n")),Object(o.b)("p",null,"Much better right? Now lets even go further and remove any dot notation."),Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),"const parseSomething = _.pipe(\n  Maybe.of,\n  map(safeJsonParse),\n  chain(dangerousParsing),\n  map(safeGet('thatArrayShouldExist'))\n);\n\nconst transformParsed = transformer =>\n  _.pipe(parseSomething, getOrElse([]), map(transformer));\n")),Object(o.b)("p",null,"Hopefully that gave you a simple introduction what monads are made of. I'll attach some references for a even more detailed (and sometimes even more confusing) explanations."),Object(o.b)("h3",{id:"references"},"References"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("a",Object(n.a)({parentName:"li"},{href:"https://mostly-adequate.gitbooks.io/mostly-adequate-guide/content/"}),"My personal must read: Mostly Adequate Guide to Functional Programming (Chapter 8 if you looking for monads)")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("a",Object(n.a)({parentName:"li"},{href:"https://jrsinclair.com/articles/2016/marvellously-mysterious-javascript-maybe-monad/"}),"Mysterious Maybe Monad")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("a",Object(n.a)({parentName:"li"},{href:"https://medium.com/javascript-scene/javascript-monads-made-simple-7856be57bfe8"}),"JS Monads Made Simple")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("a",Object(n.a)({parentName:"li"},{href:"https://dev.to/rgeraldporter/building-expressive-monads-in-javascript-introduction-23b"}),"Expressive Monads in JS")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("a",Object(n.a)({parentName:"li"},{href:"https://blog.logrocket.com/elegant-error-handling-with-the-javascript-either-monad-76c7ae4924a1/"}),"Elegant Error Handling with the Either Monad")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("a",Object(n.a)({parentName:"li"},{href:"https://github.com/fantasyland/fantasy-land"}),"Fantasy Land"))))}b.isMDXComponent=!0}}]);